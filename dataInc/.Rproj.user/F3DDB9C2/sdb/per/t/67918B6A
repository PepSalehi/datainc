{
    "contents" : "# combined$DEST is the airport id \n# https://en.wikipedia.org/wiki/List_of_airports_in_the_United_States\n\nmean(combined$ARR_DELAY, na.rm = TRUE)\nquantile(combined$ARR_DELAY, .9, na.rm = TRUE)\nmedian(combined$ARR_DELAY, na.rm = TRUE)\n\nlibrary(dplyr)\n# different versions of df; select one\ndf <- combined %>% mutate(status = ifelse(ARR_DELAY < 0, \"early\", ifelse((ARR_DELAY >= 0 & ARR_DELAY <=5), \"ontime\", \"late\" )))\n\ndf <- combined %>%   filter(!is.na(ARR_DELAY)) %>%  mutate(status = ifelse(ARR_DELAY < 5, \"early\",  \"late\" ))\n\n\ndf <- combined %>% mutate(early = ifelse(ARR_DELAY < 0, 1, 0 ))  %>% mutate(ontime = ifelse((ARR_DELAY >=0 & ARR_DELAY<=5), 1,0)) %>% \n  mutate(late = ifelse(ARR_DELAY >5, 1, 0 ))\n\ndf <- combined %>% mutate(status = ifelse(ARR_DELAY < 0, -1 , ifelse((ARR_DELAY >= 0 & ARR_DELAY <=5), 0, 1 )))\n\n#http://r.789695.n4.nabble.com/hhmm-time-format-strptime-and-k-td4651208.html\n#http://www.noamross.net/blog/2014/2/10/using-times-and-dates-in-r---presentation-code.html\n#http://stackoverflow.com/questions/8924133/seq-for-posixct\ndf$Time <- ifelse(nchar(df$DEP_TIME) == 3, paste0('0', df$DEP_TIME), ifelse(nchar(df$DEP_TIME) == 2,paste0('0','0', df$DEP_TIME), df$DEP_TIME))\ndf$newTime <- as.POSIXct(df$Time,tz=\"GMT\", format = \"%H%M\", origin= as.Date(\"2016-02-16\"))\ndate1 <- as.Date(\"2016-02-16 \")\nmy.breaks <- (seq.POSIXt(as.POSIXct(date1), by = \"1 hour\", length.out = 24,format=\"%H%M\",tz=\"GMT\"))\ndf$TimeBIn <- cut.POSIXt((df$newTime), breaks = my.breaks)\n\n#\nsample_origin <- c(\"MA\")\nsample_destination <- c(\"NY\")\nsample_months <- c(1,2,3,4,5)\n\nsample_OD <- df[df$MONTH %in% sample_months & df$ORIGIN_STATE_ABR %in% sample_origin , ]\nsample_OD$status <- factor(sample_OD$status)\nsample_OD$CARRIER <- factor( sample_OD$CARRIER)\nsample_OD$DAY_OF_MONTH <- factor( sample_OD$DAY_OF_MONTH)\nsample_OD$TimeBIn <- factor(sample_OD$TimeBIn)\n\nsample_OD <- sample_OD %>%  dplyr::select(CARRIER, DAY_OF_MONTH, DEST_STATE_ABR, TimeBIn, DISTANCE, status, MONTH)\n# sample_data <- df[df$MONTH %in% sample_months,]\n# sample_data$status <- factor(sample_data$status)\n#\nsmp_size <- floor(0.8 * nrow(sample_OD))\ntrain_ind <- sample(seq_len(nrow(sample_OD)), size = smp_size)\ntraining <- sample_OD[train_ind,]\ntest <- sample_OD[-train_ind,]\n# \n\nplot(sample_OD$status ~  sample_OD$CARRIER) # .\nplot(sample_OD$status ~ (sample_OD$MONTH)) # **\nplot(sample_OD$status ~ (sample_OD$DAY_OF_MONTH)) # ***\nplot(sample_OD$status ~ (sample_OD$TimeBIn)) # ***\nplot(sample_OD$status ~ (sample_OD$DISTANCE)) # ***\n\n\nmax(df$DEP_TIME, na.rm = TRUE)\nmin(df$DEP_TIME, na.rm = TRUE)\n\n\n\n# corr plot\nm <- cor(sample_OD[, c(3,4,7,11,17,39)], use=\"complete\")\nlibrary(corrplot)\ncorrplot(m, method = \"square\")\n#\n# airport ids should be changed to dummy variables, because no \"ordering\" exists among them. \n#\nflights.dummy <- as.data.frame(model.matrix( ~   MONTH +  CARRIER + TimeBIn -1  ,data = sample_data))\nsample_data <- subset(sample_data,  !is.na(TimeBIn) )\n\nflights <-data.frame(sample_data$status,  flights.dummy)\ncolnames(sample_OD)\n#0\nlibrary(tree)\ntree_df <- tree(status ~ . , data = sample_OD) # does not really work\nglm.fit <- glm(status ~.  , data = training, family = binomial)\nsummary(glm.fit)\nglm.probs =predict(glm.fit,test, type =\"response\")\nglm.probs[1:10]\ncontrasts(training$status)\nglm.pred <- rep(\"late\", nrow(test))\nglm.pred[glm.probs<0.3] = \"early\"\ntable(glm.pred, test$status)\n\n\n(trueNegativeRate <- 1560/(1560 + 826))\n(recall <- 3309/(3309 + 1943))\n(accuracy <- (1560+3309)/nrow(test) ) # or mean(glm.pred == test$status)\n(precision <- 3309/(3309+826))\n\n\nmean(glm.pred == test$status)\ntable(test$status)\n(prior <- 2336/(2336 + 5302))\n\nlibrary(pROC)\ng <- roc(status ~ glm.probs, data = test)\nplot(g)\nhist(glm.probs)\n\n\n\n############### library of code snippets\n\n\ntree_df <- tree(status ~ MONTH + DAY_OF_MONTH  + CARRIER + ORIGIN_AIRPORT_ID + DEST_AIRPORT_ID  , data = df)\nsummary(tree_df)\nplot(tree_df)\ntext(tree_df)\n\nrm(tree_df)\n#\nglm.fit <- glm(status ~ MONTH + DAY_OF_MONTH  + CARRIER + ORIGIN_AIRPORT_ID + DEST_AIRPORT_ID  , data = training, family = binomial)\nsummary(glm.fit)\nglm.probs =predict(glm.fit,test, type =\"response\")\nglm.probs[1:10]\ncontrasts(training$status)\nglm.pred <- rep(\"late\", nrow(test))\nglm.pred[glm.probs<0.3] = \"early\"\ntable(glm.pred, test$status)\n\n(164 + 648091)/nrow(test) #0.713857\n#\nmedian(glm.probs)\n#\nlibrary(MASS)\nlda.fit <- lda(status ~ MONTH + DAY_OF_MONTH  + CARRIER + ORIGIN_AIRPORT_ID + DEST_AIRPORT_ID  , data = training)\n\nlda.fit <- lda(status ~  MONTH + DAY_OF_MONTH  + CARRIER , data = sample_OD)\n\nlda.fit\nplot(lda.fit) # what does this show?\nlda.pred <- predict(lda.fit, test)\nlda.class =lda.pred$class\ntable(lda.class, test$status)\n\nqda.fit <- qda(status ~ MONTH + DAY_OF_MONTH  + CARRIER + ORIGIN_AIRPORT_ID + DEST_AIRPORT_ID  , data = training)\nqda.fit\nqda.class =predict(qda.fit ,test)$class\ntable(qda.class, test$status) # way worse\n#\nlibrary(class)\ntrain.x <- cbind(training$MONTH, training$DAY_OF_MONTH, training$CARRIER, training$ORIGIN_AIRPORT_ID, training$DEST_AIRPORT_ID )\ntest.x <- cbind(test$MONTH, test$DAY_OF_MONTH, test$CARRIER, test$ORIGIN_AIRPORT_ID, test$DEST_AIRPORT_ID )\ntrain.status <- training$status\n\nknn.pred <- knn(train.x, test.x, train.status, k )\n\n#\nlibrary(ROCR)\n#\nlibrary(rpart)\n\ndf_rp <- rpart(status ~ MONTH + DAY_OF_MONTH  + CARRIER + ORIGIN + DEST + DEP_TIME  , data = training)\npredictions <- predict(df_rp, test, type = c(\"class\"))\n\ncolnames(df)\nrm(df_rp)\nnrow(df[df$status==0, ]) # 599,153\nnrow(df[df$status==1, ]) #  1,388,250\nnrow(df[df$status==-1, ]) # 3,071,315\n\napropos(\"confusion\")\n",
    "created" : 1455570455939.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "191609205",
    "id" : "67918B6A",
    "lastKnownWriteTime" : 1455760285,
    "path" : "C:/Users/Peyman.n/Dropbox/data incubator/dataInc/status.r",
    "project_path" : "status.r",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}